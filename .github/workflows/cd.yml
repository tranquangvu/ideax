name: CD

on:
  workflow_run:
    workflows:
      - CI
    branches:
      - main
    types:
      - completed

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set vars
        id: set-vars
        run: |
          echo "short_sha=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT
          echo "build_time=$(date +'%Y%m%d-%s')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ vars.ECR_REGISTRY }}

      - name: Build and push image to Amazon ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:${{ steps.set-vars.outputs.short_sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy application to AWS EB environment
        env:
          IMAGE_TAG: ${{ steps.set-vars.outputs.short_sha }}
          APP_VERSION: app-${{ steps.set-vars.outputs.short_sha }}-${{ steps.set-vars.outputs.build_time }}.zip
          EB_BUCKET: ${{ vars.EB_BUCKET }}
          EB_APP: ${{ vars.EB_APP }}
          EB_ENV: ${{ vars.EB_ENV }}
        run: |
          sed -i -e "s/\${IMAGE_TAG:-latest}/$IMAGE_TAG/g" docker-compose.yml
          zip -r $APP_VERSION docker-compose.yml nginx
          aws s3 cp $APP_VERSION s3://$EB_BUCKET/$EB_APP/$APP_VERSION
          aws elasticbeanstalk create-application-version --application-name $EB_APP --version-label $APP_VERSION --source-bundle S3Bucket=$EB_BUCKET,S3Key=$EB_APP/$APP_VERSION
          aws elasticbeanstalk update-environment --application-name $EB_APP --environment-name $EB_ENV --version-label $APP_VERSION
          (aws elasticbeanstalk wait environment-updated --application-name $EB_APP --environment-name $EB_ENV --version-label $APP_VERSION) &
          wait_pid=$!
          while ps -p $wait_pid > /dev/null; do
            echo "."
            sleep 5
          done
          echo "Completed deployment successfully."
